{
  "_args": [
    [
      {
        "raw": "cloudinary-core@^2.3.0",
        "scope": null,
        "escapedName": "cloudinary-core",
        "name": "cloudinary-core",
        "rawSpec": "^2.3.0",
        "spec": ">=2.3.0 <3.0.0",
        "type": "range"
      },
      "/Users/nolandavis/WebProjects/NolanDav.is"
    ]
  ],
  "_from": "cloudinary-core@>=2.3.0 <3.0.0",
  "_id": "cloudinary-core@2.3.0",
  "_inCache": true,
  "_location": "/cloudinary-core",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/cloudinary-core-2.3.0.tgz_1490620911210_0.3109358830843121"
  },
  "_npmUser": {
    "name": "cloudinary",
    "email": "info@cloudinary.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cloudinary-core@^2.3.0",
    "scope": null,
    "escapedName": "cloudinary-core",
    "name": "cloudinary-core",
    "rawSpec": "^2.3.0",
    "spec": ">=2.3.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/",
    "/cloudinary-react"
  ],
  "_resolved": "https://registry.npmjs.org/cloudinary-core/-/cloudinary-core-2.3.0.tgz",
  "_shasum": "55eb30198544ef2b2d2523005a6f21d54b708b47",
  "_shrinkwrap": null,
  "_spec": "cloudinary-core@^2.3.0",
  "_where": "/Users/nolandavis/WebProjects/NolanDav.is",
  "author": {
    "name": "Cloudinary",
    "email": "info@cloudinary.com"
  },
  "bugs": {
    "url": "https://github.com/cloudinary/cloudinary_js/issues"
  },
  "dependencies": {
    "lodash": ">=3.0"
  },
  "description": "Cloudinary Client Side JS library. Cloudinary streamlines your web application’s image manipulation needs. Cloudinary's cloud-based servers automate image uploading, resizing, cropping, optimizing, sprite generation and more.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "55eb30198544ef2b2d2523005a6f21d54b708b47",
    "tarball": "https://registry.npmjs.org/cloudinary-core/-/cloudinary-core-2.3.0.tgz"
  },
  "gitHead": "9e7aaf7fcc7f1ecd2163461251b3a1559a04183f",
  "homepage": "https://github.com/cloudinary/cloudinary_js",
  "license": "MIT",
  "main": "cloudinary-core.js",
  "maintainers": [
    {
      "name": "cloudinary",
      "email": "info@cloudinary.com"
    }
  ],
  "name": "cloudinary-core",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/cloudinary/cloudinary_js.svg?branch=master)](https://travis-ci.org/cloudinary/cloudinary_js) [![npm](https://img.shields.io/npm/v/cloudinary-core.svg?maxAge=2592000)]() [![Bower](https://img.shields.io/bower/v/cloudinary-core.svg?maxAge=2592000)]() [![license](https://img.shields.io/github/license/cloudinary/pkg-cloudinary-core.svg?maxAge=2592000)]()\n\n:information_source: This is a distribution repository for `bower` and `npm`. The sources for this repository are maintained at the [cloudinary_js repository](https://github.com/cloudinary/cloudinary_js). Please submit issues and pull requests to that repository.\n\n# Cloudinary Client Side JavaScript Library<br>`bower` and `npm` repository\n\nCloudinary is a cloud service that offers a solution to a web application's entire image management pipeline.\n\nEasily upload images to the cloud. Automatically perform smart image resizing, cropping and conversion without installing any complex software. Integrate Facebook or Twitter profile image extraction in a snap, in any dimension and style to match your website’s graphics requirements. Images are seamlessly delivered through a fast CDN, and much much more.\n\nCloudinary offers comprehensive APIs and administration capabilities and is easy to integrate with any web application, existing or new.\n\nCloudinary provides URL and HTTP based APIs that can be easily integrated with any Web development framework.\n\n## Getting started guide\n\n![](http://res.cloudinary.com/cloudinary/image/upload/see_more_bullet.png)  **Take a look at our [Getting started guide for jQuery](http://cloudinary.com/documentation/jquery_integration#getting_started_guide)**. (Core JavaScript documentation coming soon.)\n\n\n## Installation\n\n### bower\n\n1. Install the files using the following command. Use the optional `--save` parameter if you wish to save the dependency in your bower.json file.\n\n   ```shell\n   bower install cloudinary-core\n   ```\n1. Include the javascript file in your HTML. For Example:\n\n   ```html\n   <script src=\"bower_components/lodash/lodash.js\"                  type=\"text/javascript\"></script>\n   <script src=\"bower_components/cloudinary-core/cloudinary-core.js\" type=\"text/javascript\"></script>\n   ```\n\n   If you do not intend to use `lodash` in your own code, you can instead use the shrinkwrap version which includes a subset\n   of the lodash functions. This reduces the loaded code by about 50%!\n\n   ```html\n   <script src=\"bower_components/cloudinary-core/cloudinary-core-shrinkwrap.js\" type=\"text/javascript\"></script>\n   ```\n### NPM\nThe following instructions describe the installation of the **client-side libraries**. For the server side NodeJS library, see https://github.com/cloudinary/cloudinary_npm\n\n1. Install the files using:\n\n   ```shell\n   npm install cloudinary-core\n   ```\n1. Include the javascript file in your HTML. For Example:\n\n   ```html\n   <script src=\"node_modules/lodash/lodash.js\"                   type=\"text/javascript\"></script>\n   <script src=\"node_modules/cloudinary-core/cloudinary-core.js\" type=\"text/javascript\"></script>\n   ```\n\n   See comment above regarding the shrinkwrap version.\n\nFor the server side NPM library, please refer to https://github.com/cloudinary/cloudinary_npm.\n\n## Setup\n\nIn order to properly use this library you have to provide it with a few configuration parameters:\n\nRequired:\n\n* `cloud_name` - The cloudinary cloud name associated with your Cloudinary account.\n\nOptional:\n\n* `private_cdn`, `secure_distribution`, `cname`, `cdn_subdomain` - Please refer to [Cloudinary Documentation](http://cloudinary.com/documentation/rails_additional_topics#configuration_options) for information on these parameters.\n\nTo set these configuration parameters use the `Cloudinary::config` function (see below).\n\n## Usage\n\nThe following blog post details the process of setting up a jQuery based file upload.\nhttp://cloudinary.com/blog/direct_image_uploads_from_the_browser_to_the_cloud_with_jquery\n\nThe Cloudinary Documentation can be found at:\nhttp://cloudinary.com/documentation\n\n### Cloudinary JavaScript library\n\nThe Core Cloudinary JavaScript library provides several classes, defined under the \"`cloudinary`\" domain. The reference documentation is located at https://cloudinary.github.io/pkg-cloudinary-core\n\nThe Cloudinary JavaScript library provides several classes, defined under the \"`cloudinary`\" domain.\n\n#### Configuration\n\nStart by instantiating a new Cloudinary class:\n\n##### Explicitly\n\n```javascript\nvar cl = cloudinary.Cloudinary.new( { cloud_name: \"demo\"});\n```\n\n##### Using the config function\n\n```javascript\n\n// Using the config function\nvar cl = cloudinary.Cloudinary.new();\ncl.config( \"cloud_name\", \"demo\");\n```\n\n##### From meta tags in the current HTML document\n\nWhen using the library in a browser environment, you can use meta tags to define the configuration options.\n\nThe `init()` function is a convenience function that invokes both `fromDocument()` and `fromEnvironment()`.\n\n\nFor example, add the following to the header tag:\n```html\n<meta name=\"cloudinary_cloud_name\" content=\"demo\">\n```\n\nIn your JavaScript source, invoke `fromDocument()`:\n```javascript\nvar cl = cloudinary.Cloudinary.new();\ncl.fromDocument();\n// or\ncl.init();\n```\n\n##### From environment variables\n\nWhen using the library in a backend environment such as NodeJS, you can use an environment variable to define the configuration options.\n\nSet the environment variable, for example:\n```shell\nexport CLOUDINARY_URL=cloudinary://demo\n```\nIn your JavaScript source, invoke `fromEnvironment()`:\n```javascript\nvar cl = cloudinary.Cloudinary.new();\ncl.fromEnvironment();\n// or\ncl.init();\n\n```\n\n#### URL generation\n\n```javascript\ncl.url(\"sample\")\n// \"http://res.cloudinary.com/demo/image/upload/sample\"\ncl.url( \"sample\", { width: 100, crop: \"fit\"})\n// \"http://res.cloudinary.com/demo/image/upload/c_fit,w_100/sample\"\n\n```\n\n#### HTML tag generation\n\nYou can generate HTML tags in several ways:\n\n`Cloudinary::image()` generates a DOM tag, and prepares it for responsive functionality. This is the same functionality as `$.cloudinary.image()` in the Cloudinary jQuery library.\n\n```javascript\ncl.image(\"sample\")\n```\nproduces:\n```html\n<img src=​\"http:​/​/​res.cloudinary.com/​demo/​image/​upload/​sample\" data-src-cache=​\"http:​/​/​res.cloudinary.com/​demo/​image/​upload/​sample\">​\n```\n\nYou can generate an image Tag using the `imageTag` function:\n\n```javascript\nvar tag = cl.imageTag(\"sample\");\ntag.toHtml();\n```\nwhich produces:\n```html\n<img src=\"http://res.cloudinary.com/demo/image/upload/sample\">\n```\nand:\n```javascript\ntag.transformation().crop(\"fit\").width(100).toHtml();\n```\nwhich produces:\n```html\n<img src=\"http://res.cloudinary.com/demo/image/upload/c_fit,w_100/sample\">\n```\n\nYou can also use `ImageTag` independently:\n\n```javascript\nvar tag = cloudinary.ImageTag.new( \"sample\", { cloud_name: \"some_other_cloud\" });\ntag.toHtml();\n```\nwhich produces:\n```html\n<img src=\"http://res.cloudinary.com/some_other_cloud/image/upload/sample\">\n```\n\n\n#### Transformation\n\nIn addition to using a plain object to define transformations or using the builder methods (both described above), you can define transformations by using the Transformation class:\n\n```javascript\nvar tr = cloudinary.Transformation.new();\ntr.crop(\"fit\").width(100);\ntr.serialize()\n// \"c_fit,w_100\"\n```\n\nYou can also chain transformations together:\n\n```javascript\nvar tr = cloudinary.Transformation.new();\ntr.width(10).crop('fit').chain().angle(15).serialize()\n// \"c_fit,w_10/a_15\"\n```\n\n![](http://res.cloudinary.com/cloudinary/image/upload/see_more_bullet.png) **See [our documentation](http://cloudinary.com/documentation/jquery_image_manipulation) for more information about displaying and transforming images using jQuery**.                                         \n\n### Other Cloudinary JavaScript libraries\n\n#### jQuery plugin\nIf you are using jQuery, you can take advantage of the Cloudinary jQuery plugin at [https://github.com/cloudinary/pkg-cloudinary-jquery](https://github.com/cloudinary/pkg-cloudinary-jquery).\n\n#### jQuery File upload\nThe Cloudinary jQuery File Upload library extends the Cloudinary jQuery plugin with support for the [Blueimp jQuery File Upload library](https://blueimp.github.io/jQuery-File-Upload/).\nThe library can be found at [https://github.com/cloudinary/pkg-cloudinary-jquery-file-upload](https://github.com/cloudinary/pkg-cloudinary-jquery-file-upload).\n\n## Additional resources\n\nAdditional resources are available at:\n\n* [Website](http://cloudinary.com)\n* [Documentation](http://cloudinary.com/documentation)\n* [Knowledge Base](http://support.cloudinary.com/forums)\n* [Documentation for jQuery integration](http://cloudinary.com/documentation/jquery_integration)\n* [jQuery image upload documentation](http://cloudinary.com/documentation/jquery_image_upload)\n* [jQuery image manipulation documentation](http://cloudinary.com/documentation/jquery_image_manipulation)\n* [Image transformations documentation](http://cloudinary.com/documentation/image_transformations)\n\n## Support\n\nYou can [open an issue through GitHub](https://github.com/cloudinary/cloudinary_js/issues).\n\nContact us at [http://cloudinary.com/contact](http://cloudinary.com/contact).\n\nStay tuned for updates, tips and tutorials: [Blog](http://cloudinary.com/blog), [Twitter](https://twitter.com/cloudinary), [Facebook](http://www.facebook.com/Cloudinary).\n\n\n## License\n\nReleased under the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cloudinary/pkg-cloudinary-core.git"
  },
  "scripts": {},
  "types": "cloudinary-core.d.ts",
  "version": "2.3.0"
}
